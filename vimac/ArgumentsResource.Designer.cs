//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace vimac {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class ArgumentsResource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ArgumentsResource() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("vimac.ArgumentsResource", typeof(ArgumentsResource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to generate (g)
        ///
        ///This flag indicates the processing mode. When present, it creates a mapping file which contains the relevant files from the designated directory with only the original name. If this flag is absent, the process will operate in the normal mapping mode.
        ///
        ///Usage:
        ///-generate
        ///
        ///-g.
        /// </summary>
        public static string GenerateFileDescription {
            get {
                return ResourceManager.GetString("GenerateFileDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to help (h)
        ///
        ///Displays the help information. This overrides all other commands.
        ///
        ///Usage:
        ///-help
        ///
        ///-h.
        /// </summary>
        public static string HelpDescription {
            get {
                return ResourceManager.GetString("HelpDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to mappingFile (m)
        ///
        ///Provides the name of a file which contains the mappings. It can be used with both the generate file (-g) flag and during normal processing. When generating a file, this is the file that is created. When processing, this argument specifies the file to use for mapping the existing file to the new file name.
        ///
        ///Usage:
        ///-mappingFile &lt;fileName&gt;
        ///
        ///-m &lt;fileName&gt; -g.
        /// </summary>
        public static string MappingsFileDescription {
            get {
                return ResourceManager.GetString("MappingsFileDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to output (o)
        ///
        ///Specifies the output directory for processing. It can be used with both the generate file (-g) flag and during normal processing. When generating a file, this argument specifes where the file should be created. When processing, this argument specifies where the files should be moved to after being renamed.
        ///
        ///Usage:
        ///-output &lt;directory&gt;
        ///
        ///-o &lt;directory&gt; -g.
        /// </summary>
        public static string OutputDirectoryDescription {
            get {
                return ResourceManager.GetString("OutputDirectoryDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This application maps a set of temporary names to the actual name it should be called via a mappings file..
        /// </summary>
        public static string ProgramDescription {
            get {
                return ResourceManager.GetString("ProgramDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to pattern (p)
        ///
        ///Filters the files which will be processed based on the regular expression pattern provided. It can be used with both the generate file (-g) flag and during normal processing. When generating a file, this argument only creates records for files matching the pattern within the new matches file. When processing, this argument specifies which the files need to be moved to after being renamed.
        ///
        ///Usage:
        ///-pattern &lt;pattern&gt;
        ///
        ///-p &lt;pattern&gt; -g.
        /// </summary>
        public static string RegexDescription {
            get {
                return ResourceManager.GetString("RegexDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to undo (u)
        ///
        ///This process undoes the changes made from a mapping process found in a mapping file. It finds the file with the desired name and reverts it to the original name as defined in the file.
        ///
        ///Usage:
        ///-u -m &lt;mappingFile&gt; -o &lt;outputdirectory&gt;.
        /// </summary>
        public static string UndoDescription {
            get {
                return ResourceManager.GetString("UndoDescription", resourceCulture);
            }
        }
    }
}
